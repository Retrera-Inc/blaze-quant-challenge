# -*- coding: utf-8 -*-
"""Rithish_Predictions.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1tlqpSiPrWTzaeZHHHu5nlXpwJprqlx_w

# DATA PREPROCESSING
"""
# THE ORGINAL CODE INCLUDING THE DATASETS ARE PRESENT IN THE GITHUB LINK : https://github.com/RITHISH01/code-blaze
import pandas as pd

eth_data = pd.read_csv('ETH-USD.csv')


print(eth_data.head())

# Check for missing values
print(eth_data.isnull().sum())


eth_data['Date'] = pd.to_datetime(eth_data['Date'])

print(eth_data.describe())

# Plot the historical price data
import matplotlib.pyplot as plt

plt.figure(figsize=(10, 6))
plt.plot(eth_data['Date'], eth_data['Close'], color='blue')
plt.title('Historical ETH-USD Prices')
plt.xlabel('Date')
plt.ylabel('Price (USD)')
plt.grid(True)
plt.show()

"""# ETHEREUM PRICE PREDICTION

**ARIMA MODEL**

**PMDARIMA LIBRARY:**
> used to find the best order for arima model
"""

!pip install pmdarima

import pandas as pd
from pmdarima import auto_arima

# Load Ethereum dataset
ethereum_data = pd.read_csv('ETH-USD.csv')

# Extract the 'Close' prices
prices = ethereum_data['Close']

# Fit auto ARIMA model
model = auto_arima(prices, seasonal=False, trace=True)

# Print model summary
print(model.summary())

"""
**ARIMA MODEL**

> Building Arima model with the best order found"""

import numpy as np
import pandas as pd
from statsmodels.tsa.arima.model import ARIMA
import matplotlib.pyplot as plt

# Load the dataset
eth_data = pd.read_csv('ETH-USD.csv')
eth_data['Date'] = pd.to_datetime(eth_data['Date'])
eth_data.set_index('Date', inplace=True)

# Select 'Close' prices as the target variable
target_variable = 'Close'
dataset = eth_data[target_variable]

# Specify the period for prediction
start_date = '2024-03-01'
end_date = '2024-03-15'

# Extract the subset of data for the specified period
subset_data = dataset.loc[start_date:end_date]

# Fit the ARIMA model
model = ARIMA(subset_data, order=(3,1,2))  # Example order (p, d, q)
fitted_model = model.fit()

# Generate predictions
predictions = fitted_model.predict(start=start_date, end=end_date)

# Plot actual and predicted prices
plt.plot(subset_data.index, subset_data.values, label='Actual Prices')
plt.plot(predictions.index, predictions.values, label='Predicted Prices')
plt.xlabel('Date')
plt.ylabel('Price (USD)')
plt.title('ARIMA Model: Actual vs Predicted Ethereum Prices')
plt.legend()
plt.show()

"""**SAMPLE PRICE PREDICTION FOR THE MODEL FROM MARCH 1 2024 TO MARCH 15 2024**"""

# Generate predictions
predictions = fitted_model.predict(start='2024-03-02', end=end_date, typ='levels')

# Print predicted and actual values
print("Date\t\tPredicted Price\t\tActual Price")
for date, pred_price, actual_price in zip(predictions.index, predictions.values, subset_data.values):
    print(f"{date}\t{pred_price:.2f}\t\t{actual_price:.2f}")

"""**RMS VALUE OF THE MODEL**"""

# Adjust the end date to match the last date in the subset of data
from sklearn.metrics import mean_squared_error
end_date = subset_data.index[-1]

# Generate predictions using the adjusted end date
predictions = fitted_model.predict(start=start_date, end=end_date, typ='levels')
# Calculate RMSE
rmse = np.sqrt(mean_squared_error(subset_data[1:], predictions[1:]))
print("RMSE:", rmse)

"""**PREDICTED VALUES FOR ETHEREUM USING ARIMA MODEL**"""

import numpy as np
import pandas as pd
from statsmodels.tsa.arima.model import ARIMA

# Load the dataset
eth_data = pd.read_csv('ETH-USD.csv')
eth_data['Date'] = pd.to_datetime(eth_data['Date'])
eth_data.set_index('Date', inplace=True)

# Select 'Close' prices as the target variable
target_variable = 'Close'
dataset = eth_data[target_variable]

# Specify the period for prediction
start_date = '2023-03-15'
end_date = '2024-03-15'
forecast_start_date = '2024-03-15'
forecast_end_date = '2024-03-23'

# Extract the subset of data for the specified period
subset_data = dataset.loc[start_date:end_date]

# Fit the ARIMA model
model = ARIMA(subset_data, order=(3,1,2))  # Example order (p, d, q)
fitted_model = model.fit()

# Generate predictions for the specified period
predictions = fitted_model.predict(start=forecast_start_date, end=forecast_end_date)

# Print predicted values
print("Predicted Prices from", forecast_start_date, "to", forecast_end_date)
print(predictions)

"""# Arbitrum
**ARIMA MODEL**

**PMDARIMA LIBRARY:**
> used to find the best order for arima model


"""

import pandas as pd
from pmdarima import auto_arima

# Load Ethereum dataset
arb_data = pd.read_csv('ARB-USD.csv')

# Extract the 'Close' prices
prices = arb_data['Close']

# Fit auto ARIMA model
model = auto_arima(prices, seasonal=False, trace=True)

# Print model summary
print(model.summary())

"""
**ARIMA MODEL**

> Building Arima model with the best order found"""

import numpy as np
import pandas as pd
from statsmodels.tsa.arima.model import ARIMA
import matplotlib.pyplot as plt

# Load the dataset
arb_data = pd.read_csv('ARB-USD.csv')
arb_data['Date'] = pd.to_datetime(arb_data['Date'])
arb_data.set_index('Date', inplace=True)

# Select 'Close' prices as the target variable
target_variable = 'Close'
dataset = arb_data[target_variable]

# Specify the period for prediction
start_date = '2024-03-09'
end_date = '2024-03-15'

# Extract the subset of data for the specified period
subset_data = dataset.loc[start_date:end_date]

# Fit the ARIMA model
model = ARIMA(subset_data, order=(3,1,2))  # Example order (p, d, q)
fitted_model = model.fit()

# Generate predictions
predictions = fitted_model.predict(start=start_date, end=end_date)

# Plot actual and predicted prices
plt.plot(subset_data.index, subset_data.values, label='Actual Prices')
plt.plot(predictions.index, predictions.values, label='Predicted Prices')
plt.xlabel('Date')
plt.ylabel('Price (USD)')
plt.title('ARIMA Model: Actual vs Predicted Arbitrum Prices')
plt.legend()
plt.show()

"""**SAMPLE PRICE PREDICTION FOR THE MODEL FROM MARCH 1 2024 TO MARCH 15 2024**"""

# Generate predictions
start_date='2024-03-01'
end_date='2024-03-15'
predictions = fitted_model.predict(start=start_date, end=end_date, typ='levels')
subset_data = dataset.loc[start_date:end_date]
# Print predicted and actual values

print("Date\t\tPredicted Price\t\tActual Price")
for date, pred_price, actual_price in zip(predictions.index, predictions.values, subset_data.values):
    print(f"{date}\t{pred_price:.2f}\t\t{actual_price:.2f}")

"""**MODEL EVALUATION USING RMSE**"""

# Adjust the end date to match the last date in the subset of data
from sklearn.metrics import mean_squared_error
end_date = subset_data.index[-1]

# Generate predictions using the adjusted end date
predictions = fitted_model.predict(start=start_date, end=end_date, typ='levels')
# Calculate RMSE

rmse = np.sqrt(mean_squared_error(subset_data[1:], predictions[1:]))
print("RMSE:", rmse)

"""**THE PREDICTED VALUES ARE:**"""

import numpy as np
import pandas as pd
from statsmodels.tsa.arima.model import ARIMA

# Load the dataset
arb_data = pd.read_csv('ARB-USD.csv')
arb_data['Date'] = pd.to_datetime(arb_data['Date'])
arb_data.set_index('Date', inplace=True)

# Select 'Close' prices as the target variable
target_variable = 'Close'
dataset = link_data[target_variable]

# Specify the period for prediction
start_date = '2023-03-23'
end_date = '2024-03-15'
forecast_start_date = '2024-03-15'
forecast_end_date = '2024-03-23'

# Extract the subset of data for the specified period
subset_data = dataset.loc[start_date:end_date]

# Fit the ARIMA model
model = ARIMA(subset_data, order=(3,1,2))  # Example order (p, d, q)
fitted_model = model.fit()

# Generate predictions for the specified period
predictions = fitted_model.predict(start=forecast_start_date, end=forecast_end_date)

# Print predicted values
print("Predicted Prices from", forecast_start_date, "to", forecast_end_date)
print(predictions)

"""# CHAINLINK

Finding the best Order for Arima model
"""

import pandas as pd
from pmdarima import auto_arima

# Load Ethereum dataset
link_data = pd.read_csv('LINK-USD.csv')

# Extract the 'Close' prices
prices = link_data['Close']

# Fit auto ARIMA model
model = auto_arima(prices, seasonal=False, trace=True)

# Print model summary
print(model.summary())

"""**SAMPLE PREDICTION FOR PRICES FROM 1 MARCH 2024 to 15 MARCH 2024**"""

# Generate predictions
start_date='2024-03-01'
end_date='2024-03-15'
predictions = fitted_model.predict(start=start_date, end=end_date, typ='levels')

# Extract the subset of actual prices for the same date range as predictions
subset_actual_data = dataset.loc[start_date:end_date]

# Print predicted and actual values
print("Date\t\tPredicted Price\t\tActual Price")
for date, pred_price, actual_price in zip(predictions.index, predictions.values, subset_actual_data.values):
    print(f"{date}\t{pred_price:.2f}\t\t{actual_price:.2f}")

"""**EVALUATION OF MODEL USING RMSE**"""

# Adjust the end date to match the last date in the subset of data
from sklearn.metrics import mean_squared_error
end_date = subset_data.index[-1]
subset_data = dataset.loc[start_date:end_date]
# Generate predictions using the adjusted end date
predictions = fitted_model.predict(start=start_date, end=end_date, typ='levels')
# Calculate RMSE
rmse = np.sqrt(mean_squared_error(subset_data[1:], predictions[1:]))
print("RMSE:", rmse)

"""# The Predicted Values are:"""

import numpy as np
import pandas as pd
from statsmodels.tsa.arima.model import ARIMA

# Load the dataset
link_data = pd.read_csv('LINK-USD.csv')
link_data['Date'] = pd.to_datetime(link_data['Date'])
link_data.set_index('Date', inplace=True)

# Select 'Close' prices as the target variable
target_variable = 'Close'
dataset = link_data[target_variable]

# Specify the period for prediction
start_date = '2023-03-15'
end_date = '2024-03-15'
forecast_start_date = '2024-03-15'
forecast_end_date = '2024-03-23'

# Extract the subset of data for the specified period
subset_data = dataset.loc[start_date:end_date]

# Fit the ARIMA model
model = ARIMA(subset_data, order=(3,1,2))  # Example order (p, d, q)
fitted_model = model.fit()

# Generate predictions for the specified period
predictions = fitted_model.predict(start=forecast_start_date, end=forecast_end_date)

# Print predicted values
print("Predicted Prices from", forecast_start_date, "to", forecast_end_date)
print(predictions)
